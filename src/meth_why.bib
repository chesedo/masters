@inproceedings{yourdon_1977,
author = {Yourdon, Edward},
title = {The Choice of New Software Development Methodologies for Software Development Projects},
year = {1977},
isbn = {9781450379144},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1499402.1499447},
doi = {10.1145/1499402.1499447},
abstract = {Data processing managers have a number of new "structured" methodologies to assist them in EDP software projects: structured programming, structured design, HIPO, top-down development, structured analysis, structured walkthroughs, and chief programmer teams. Since many of these methodologies are still considered new and "experimental", it is often difficult for the manager to determine which of the methodologies should be used on a software project.This paper briefly reviews each of the new structured methodologies. It then makes suggestions about the use of the methodologies for new projects, concluding that the use of informal walkthroughs is probably the best way for the manager to introduce the methodologies into an organization that has no previous experience with them.The point is also made that "research-and-development" projects have different trade-offs than "bread-and-butter" projects. For projects that have hard deadlines and budgets, a number of trade-offs are suggested in order to help the manager decide which of the structured methodologies should be employed.},
booktitle = {Proceedings of the June 13-16, 1977, National Computer Conference},
pages = {261–265},
numpages = {5},
location = {Dallas, Texas},
series = {AFIPS '77}
}
@article{soi_1982,
title = {On creating a reliable programming environment},
journal = {Microelectronics Reliability},
volume = {22},
number = {4},
pages = {711-716},
year = {1982},
issn = {0026-2714},
doi = {https://doi.org/10.1016/S0026-2714(82)80187-X},
url = {https://www.sciencedirect.com/science/article/pii/S002627148280187X},
author = {Inder M. Soi},
abstract = {Many organizations are presently working to develop a software development methodology special to their own needs. The methodology must be supported by automated tools that improve the productivity of both the individual developer and the development team. This collection of tools and the way in which they are used constitute what has been called a “programming environment”, since most automated tools are aimed at the coding and implementation phases of software development. The task of creating effective environments is quite difficult because it is tantamount to understanding the fundamental nature of software processes. This paper is intended to give insight into the characteristics of existing program development environments and to point the way towards some desirable characteristics which may lead to the creation of reliable and cost-effective future programming environments.}
}
@article{vanderlei_1983,
author={Vanderlei,Kenneth},
year={1983},
month={Third},
title={Software Development Methodology and Practices: a World - Wide Communications Journal},
journal={GTE Network Systems World - Wide Communications Journal},
volume={21},
number={3},
pages={76},
note={Copyright - Copyright G.T.E. Automatic Electric Third Quarter 1983; Last updated - 2021-09-15},
abstract={The ability to deliver quality software in a timely manner is largely dependent on the software development environment. The production software required in GTE Network Systems' switches must be reliable, efficient, and easy to modify and understand. The key components of this environment are: 1. use of a standard and well-understood software methodology, 2. availability and use of quality software tools, and 3. a development computer system powerful enough to meet designer needs in a timely way. At GTE, a formalized hierarchical software structure is maintained for all production-level software. Production quality documentation is part of the software methodology from the beginning, and an interactive text editor is the basic tool for all documentation. Other software development tools at GTE include: 1. code generators, 2. simulators and prototype utility systems, and 3. configuration management tools. The development computer system has the capacity to meet batch job and interactive requirements.},
keywords={Communications--Computer Applications; Software; Methods; Electronic switching systems; Development; Software quality; Service introduction; 5240:Software & systems; 33531:Electrical Equipment Manufacturing; 5250:Telecommunications systems},
isbn={07426151},
language={English},
url={https://www.proquest.com/trade-journals/software-development-methodology-practices/docview/197296769/se-2?accountid=14717},
}
@article{peacham_1985,
title = {Structured methods — ten questions you should ask},
journal = {Data Processing},
volume = {27},
number = {9},
pages = {28-30},
year = {1985},
issn = {0011-684X},
doi = {https://doi.org/10.1016/0011-684X(85)90168-6},
url = {https://www.sciencedirect.com/science/article/pii/0011684X85901686},
author = {David Peacham},
keywords = {data processing, software techniques, structured methods},
abstract = {Various formal systems development methodologies (SDMs) are commercially available. There is widespread awareness of potential benefits, much less of real difference between them and of potential pitfalls. These include acceptability to DP staff and users, strategic planning, estimation, flexibility, maintenance, interfaces and suitability to applications.}
}
@article{loesh_1985,
title = {Automated development methodologies: Overview and conclusions},
journal = {Data Processing},
volume = {27},
number = {2},
pages = {43-45},
year = {1985},
issn = {0011-684X},
doi = {https://doi.org/10.1016/0011-684X(85)90018-8},
url = {https://www.sciencedirect.com/science/article/pii/0011684X85900188},
author = {David Hopelain and Bob Loesh},
keywords = {data processing, system design, design methodology},
abstract = {Practical experience of system development has shown that automated methodologies can be of great benefit. To be useful they should involve users, managers and designers, they should support a well-understood approach to design, they do not replace human judgement, they are coherent and they are aimed at producing integrated systems.}
}
@article{beregi_1985,
author={Hoffnagle,Gene F. and Beregi,William E.},
year={1985},
title={Automating the Software Development Process},
journal={IBM Systems Journal},
volume={24},
number={2},
pages={102},
note={Name - Department of Defense; Copyright - Copyright International Business Machines Corporation 1985; Last updated - 2021-09-10; CODEN - IBMSA7},
abstract={Automation is seen as a practical way to increase the productivity and quality of the software development process. One approach to automating this process and an architecture for a software engineering support facility are presented. The architecture of the software engineering support facility is designed to support long-term process experimentation, evolution, and automation. Such a facility would provide flexibility, tool portability, tool and process integration, and process automation for a great range of methodologies and tools. The use of this architecture to direct the implementation of a software engineering support facility should produce a new state of the art in software development environments that can answer the challenges raised by both software users and producers.},
keywords={Computers; Software; Reliability; Programming languages; Engineering; Development; Ada; Architecture; Automation; Productivity; Software engineering; 9190:US; 5240:Software & systems; 7500:Product planning & development; 54133:Engineering Services},
isbn={00188670},
language={English},
url={https://www.proquest.com/scholarly-journals/automating-software-development-process/docview/222408880/se-2},
}
@article{mannino_1987,
author = {Mannino, P},
title = {A Presentation and Comparison of Four Information System Development Methodologies},
year = {1987},
issue_date = {April 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {2},
issn = {0163-5948},
url = {https://doi.org/10.1145/24562.24564},
doi = {10.1145/24562.24564},
abstract = {The objective of this paper is to provide a comparison of the following four information processing system development methodologies: The Box Structure Methodology, Application Prototyping, JSD and SASD. Each approach provides a unique and different set of activities that can be followed, with emphasis on different aspects of the life cycle. For this reason, no one methodology is superior in all areas and aspects of the development life cycle. However, each one is superior in its own sense, depending on the type of system being developed. The Box Structure Methodology provides a rigorous coverage of the analysis and design phases in the development life cycle, with the use of design graphics, and a design graphics language. JSD and SASD also use graphical structures as well. However, SASD relies heavily on dataflow diagrams in the analysis and design phases, where as JSD incorporates functions, time requirements, actions, and data into its diagrams in the analysis phase, and then applies them in the implementation phase, without ever going through a design step. Finally, the Application Prototyping development methodology offers an approach that centers around the development of a prototype, which is heavily dependent upon user interaction with the user in the feasibility and analysis phases, but does not offer any design, implementation, or maintenance techniques. A methodology is only approiate for a developer, once he/she has considered these fact, and determined the system's target environment.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {apr},
pages = {26–29},
numpages = {4}
}
@article{drake_1991,
author={Jaakkola,John E. and Drake,Kalvin B.},
year={1991},
month={02},
title={ASDM: The Universal Systems Development Methodology},
journal={Journal of Systems Management},
volume={42},
number={2},
pages={6},
note={Copyright - Copyright John Carroll University, School of Business Feb 1991; Last updated - 2021-09-10; CODEN - JSYMA9},
abstract={Recent trends in small and end-user applications development, package acquisition, and the use of computer-aided software engineering (CASE) have prompted systems managers to seek a way to manage and control a wider variety of systems development scenarios. Unfortunately, these managers face a significant challenge in selecting a systems development methodology (SDM) that addresses their organizations' unique environment. A single, rigid methodology is unlikely to satisfy many needs. Integrated approaches, the current trend in SDM development, attempt to cover all phases of the systems development process. An advanced SDM (ASDM) approach is proposed that combines the coverage of the scope of the development life cycle offered by traditional methodologies and the methods and techniques offered by an integrated methodology. The ASDM likely would comprise a predefined set of methods based on each of the traditional structured, automated, and prototyping approaches. A formal tailoring process is required at the start of each project.},
keywords={Business And Economics--Management; Systems development; Methods; Effectiveness; Computer aided software engineering; Components; Applications; 5240:Software & systems},
isbn={00224839},
language={English},
url={https://www.proquest.com/scholarly-journals/asdm-universal-systems-development-methodology/docview/199824860/se-2?accountid=14717},
}
@article{scarre_1992,
author={Skok,Walter and Scarre,Gina},
year={1992},
title={Computer Project Management: An Information Systems Development Methodology as the Critical Success Factor - Myth or Universal Truth?: MRN},
journal={Management Research News},
volume={15},
number={2},
pages={6},
note={Copyright - Copyright Barmarick Press 1992; Last updated - 2021-09-09},
abstract={Alone, a formal systems development methodology cannot be seen as the critical success factor for information systems projects. The use of a formal methodology encourages good documentation, encourages quality assurance reviews, helps inexperienced staff to understand which tasks precede which, and helps project managers to control projects even with rudimentary PC software tools. However, there are a number of drawbacks in using a methodology. The main difficulty is the time taken for its introduction into an information systems department and the associated culture changes. There may be a long learning curve and high associated training costs. To say a systems development methodology is the critical success factor in computer systems project management is a myth. The ultimate decision on which approach to take, which tools or techniques to adopt, and how the development should be undertaken will always be a human one. It is important to get the mix of methodology and leadership right and not rely solely on a single factor in any computer systems development project.},
keywords={Business And Economics--Management; Systems development; Success; Methods; Factors; Comparative analysis; Project management; Information systems; Success factors; 5240:Software & systems; 2310:Planning},
isbn={01409174},
language={English},
url={https://www.proquest.com/scholarly-journals/computer-project-management-information-systems/docview/223519858/se-2?accountid=14717},
}
@article{herald_1993,
title = {Computer systems validation and the software development process},
journal = {ISA Transactions},
volume = {32},
number = {1},
pages = {65-73},
year = {1993},
note = {Special Issue on Total Quality Management},
issn = {0019-0578},
doi = {https://doi.org/10.1016/0019-0578(93)90013-M},
url = {https://www.sciencedirect.com/science/article/pii/001905789390013M},
author = {David L. Deitz and Christie J. Herald},
abstract = {This paper discusses a software development methodology in which computer systems validation is approached as an integral part of the software development process rather than a documentation effort undertaken after the completion of a project's software design and implementation phases. The authors' views on he benefits using a methodology such as the one discussed are also presented.}
}
@INPROCEEDINGS{paul_1993,
  author={Paul, R.A.},
  booktitle={[1993] Proceedings First International Software Metrics Symposium},
  title={Metrics to improve the US Army software development process},
  year={1993},
  volume={},
  number={},
  pages={40-50},
  abstract={The Software T&amp;E Panel (STEP) was organized in September 1989 to address the problem that most delays in Army system operational tests were caused by immature software. STEP focused attention on software T&amp;E, but also considered related issues of software development and deployment. STEP is currently implementing three major products: (1) policy and procedures to improve the formal process of software requirements definition; (2) a standard set of 12 software metrics which are mandatory for all Army software development efforts; and (3) improved software T&amp;E procedures. The Army metrics effort is supported by development of a central database for Army-wide metrics data collection. The database will serve as the repository of lessons learned from the use of metrics, including cost data to support cost-benefit analyses. STEP has also conducted a survey of existing commercial and government off-the-shelf tools to support the metrics data collection effort.&lt;<ETX>&gt;</ETX>},
  keywords={},
  doi={10.1109/METRIC.1993.263802},
  ISSN={},
  month={May}
}
@INPROCEEDINGS{grossman_1997,
  author={Roberts, D.C. and Grossman, D.A.},
  booktitle={IEEE WESCANEX 97 Communications, Power and Computing. Conference Proceedings},
  title={Modifying the software development life cycle to include software performance assurance},
  year={1997},
  volume={},
  number={},
  pages={100-104},
  abstract={When performance assurance is not included in the software development process, the poor performance of resulting applications will create strong interest in the subject and motivation to change the process to address the problem. In spite of this strong interest however, such a change in the process can be more difficult than expected. Based on our experience in adding performance assurance to a software development process that did not include it, we present guidelines for establishing performance assurance in an environment of large scale application development. In our environment, a centralized organization was responsible for computing facilities, and user organizations were responsible for application development. Finally, the management infrastructure and support needed for effective performance assurance is described.},
  keywords={},
  doi={10.1109/WESCAN.1997.627120},
  ISSN={},
  month={May}
}
@INPROCEEDINGS{trussel_1999,
  author={Trussell, L.},
  booktitle={IEEE Power Engineering Society. 1999 Winter Meeting (Cat. No.99CH36233)},
  title={Essential software development methodology},
  year={1999},
  volume={1},
  number={},
  pages={357-361 vol.1},
  abstract={A mature software development methodology has a number of benefits. A methodology minimizes rework by forcing an organization to develop a realistic plan before building the product. It also allows resources to be used most efficiently in the early and later stages of a system's development. Product test plans can be developed early and testing can be initiated at the start of the project rather than the end thus saving great amounts of time and resources. Testing allows a measure of quality to be tracked throughout the development process. It is also key in the establishment of a method of measure for determining when a product is ready to be released. Testing as well as risk management allow project leaders to look ahead at problems that could occur and to make appropriate plans to minimize problem impact.},
  keywords={},
  doi={10.1109/PESW.1999.747479},
  ISSN={},
  month={Jan}
}
@article{lucena_2008,
author = {Cordeiro, Lucas and Mar, Carlos and Valentin, Eduardo and Cruz, Fabiano and Patrick, Daniel and Barreto, Raimundo and Lucena, Vicente},
title = {An Agile Development Methodology Applied to Embedded Control Software under Stringent Hardware Constraints},
year = {2008},
issue_date = {January 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {1},
issn = {0163-5948},
url = {https://doi-org.uplib.idm.oclc.org/10.1145/1344452.1344459},
doi = {10.1145/1344452.1344459},
abstract = {In recent years, discrete control systems play an important role in the development and advancement of modern civilization and technology. Practically every aspect of our life is affected by some type of control systems. This kind of system maybe classified as an embedded real-time system and requires rigorous methodologies to develop the software that is under stringent hardware constraints. Therefore, the proposed development methodology adapts agile principles and patterns in order to build embedded control systems focusing on the issues related to the system's constraints and safety. Strong unit testing is the foundation of the proposed methodology for ensuring timeliness and correctness. Moreover, platform-based design approach is used to balance costs and time-to-market in view of performance and functionality constraints. We conclude that the proposed methodology reduces significantly the design time and cost as well as leads to better software modularity and reliability.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {jan},
articleno = {5},
numpages = {10},
keywords = {real-time software, platform-based design, health care, agile methodologies, organizational patterns, embedded agile development}
}
@article{uzturk_2013,
  title={Selection of appropriate software development life cycle using fuzzy logic},
  author={{\"O}zt{\"u}rk, Veysi},
  journal={Journal of Intelligent \& Fuzzy Systems},
  volume={25},
  number={3},
  pages={797--810},
  year={2013},
  publisher={IOS Press}
}
@INPROCEEDINGS{garg_2015,
  author={Khatri, Sunil Kumar and Garg, Ayushi},
  booktitle={2015 4th International Conference on Reliability, Infocom Technologies and Optimization (ICRITO) (Trends and Future Directions)},
  title={Evolving a risk-free, requirement centric and goal oriented software development life cycle model},
  year={2015},
  volume={},
  number={},
  pages={1-6},
  abstract={Software is a general term for the various kinds of programs used to operate computers and various related devices. Software mainly consists of carefully-organized instructions and code written by developers in any of various special programming languages. Software impacts on the general public and society keeps on being profound. As the significance of software development model develops, the software community consistently attempts to develop new technologies that will make it much faster, easier, and less expensive to construct good-quality software's. The software development life cycle model is a framework which consists of sequence of activities followed by the system designers and software developers. It comprises of a sequence of various different phases or stages in which every phase of the SDLC utilizes the outcomes of the previous phase. Previously developed models such as Incremental model, Spiral Model, Prototyping model, Agile Models, waterfall model, RAD model, Transformation model were successful in the early stages of software development cycle which later brings out some obstacles such as less customer satisfaction as per their requirements , high risk and cost involved, time complexity and many more. The present research emphasizes a new model which focuses on full-filling the targeted objectives based on the better understanding of customer's requirements.},
  keywords={},
  doi={10.1109/ICRITO.2015.7359262},
  ISSN={},
  month={Sep.}
}
@article{xiao_2017,
author = {Yu Xiao and Maria Watson},
title ={Guidance on Conducting a Systematic Literature Review},
journal = {Journal of Planning Education and Research},
volume = {39},
number = {1},
pages = {93-112},
year = {2019},
doi = {10.1177/0739456X17723971},
URL = {https://doi.org/10.1177/0739456X17723971},
eprint = {https://doi.org/10.1177/0739456X17723971},
publisher={SAGE Publications Sage CA: Los Angeles, CA},
abstract = { Literature reviews establish the foundation of academic inquires. However, in the planning field, we lack rigorous systematic reviews. In this article, through a systematic search on the methodology of literature review, we categorize a typology of literature reviews, discuss steps in conducting a systematic literature review, and provide suggestions on how to enhance rigor in literature reviews in planning education and research. }
}
